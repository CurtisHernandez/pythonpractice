## Sudoku
# works on easy ones on websudoku.com

import numpy
import random

def showpuzzle(puzzle):
    for i in range(0,9):
        thingtoprint = ''
        for j in range(0,9):
            if j == 3 or j == 6:
                thingtoprint = thingtoprint + ' | ' + str(puzzle[i][j])
            else:
                thingtoprint = thingtoprint + ' ' + str(puzzle[i][j])
        if i == 3 or i == 6:
            print('----------------------')
        print(thingtoprint)

puzzle = numpy.zeros((9,9)).astype(int)
# okay there's definitely a more user-friendly way to do this but FOR NOW        
for i in range(0,9):
    for j in range(0,9):
        showpuzzle(puzzle)
        puzzle[i][j] = input()

# later we will need to look at the three-by-three cells - tbts
# so I will make this
# I am sure there is a better way to do this but ughhhh
tbtpuzzle = numpy.asarray([1,1,1,2,2,2,3,3,3,
             1,1,1,2,2,2,3,3,3,
             1,1,1,2,2,2,3,3,3,
             4,4,4,5,5,5,6,6,6,
             4,4,4,5,5,5,6,6,6,
             4,4,4,5,5,5,6,6,6,
             7,7,7,8,8,8,9,9,9,
             7,7,7,8,8,8,9,9,9,
             7,7,7,8,8,8,9,9,9]).reshape(9,9)

def gettbt(tbtindex):
    findindices = []
    for n in range(9): # the rows of the tbt array
        for o in range(9): # the columns of tbt array
            if tbtpuzzle[n][o]==tbtindex:
                findindices.append([n, o])
    tbt = []
    for p in findindices:
        tbt.append(puzzle[p[0]][p[1]])
    return tbt
        

# first rows/columns
isittransposed = False
while True:
    changes = 0
    for tryrow in range(len(puzzle)):
        theZeros = numpy.where(puzzle[tryrow]==0)
        whatdoyouneed = set(range(10)) - set(puzzle[tryrow])
        for j in whatdoyouneed:
            cantbethisone = []
            for k in theZeros[0]:
                trycolumn = puzzle[:,k]
                trytbt = gettbt(tbtpuzzle[tryrow,k])
                if j not in trycolumn and j not in trytbt:
                    cantbethisone.append(1)
                else:
                    cantbethisone.append(0)
            if sum(cantbethisone)==1:
                changes = changes+1
                puzzle[tryrow][theZeros[0][cantbethisone.index(1)]] = j
        # if we've made it so that this row has just one missing...
        if numpy.count_nonzero(puzzle[tryrow]) == len(puzzle[7])-1:
            whatdoyouneed = set(range(10)) - set(puzzle[tryrow])
            theZero = numpy.where(puzzle[tryrow]==0)
            changes = changes+1
            puzzle[tryrow][theZero[0][0]]=list(whatdoyouneed)[0]
    puzzle = numpy.transpose(puzzle)
    isittransposed = not isittransposed
    if changes > 0:
        continue
    elif changes==0:
        break

if isittransposed==True:
    puzzle = numpy.transpose(puzzle)
showpuzzle(puzzle)
