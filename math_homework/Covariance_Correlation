from fractions import Fraction
import math as m

def problem(text):
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
    print(text + "\n")
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")

def expectedValue(rangeX,probX):
    answer = 0
    for i in range(len(rangeX)):
        answer += rangeX[i] * probX[i]
    return answer
    
problem("Problem 1. Let Let R1 and R2 be the numbers obtained on two rolls of a fair die. Define X and Y as X = max{R1, R2} and Y = min{R1, R2}. Compute E(Y | X = x) for every x ∈ Range(X).")
print("I am operating under the assumption here that min{R1,R2} is meant to be the minimum across both rolls R1 and R2.")
print("In that case, Range(X) = {1,2,3,4,5,6} and so is Range(Y).")
print("If you chart out R1 and R2 and X and Y, you get 36 options for X and Y.")
print("In E(Y|X=1), range(Y) = {1,2,3,4,5,6} and prob(Y|X=1) = {1/36, 2/36...}. So E(Y|X=1) = " + str(expectedValue([1,2,3,4,5,6],[Fraction(1,36),Fraction(2,36),Fraction(2,36),Fraction(2,36),Fraction(2,36),Fraction(2,36)])) + ".")
print("In E(Y|X=2), range(Y) = {2,3,4,5,6} and prob(Y|X=2) = {1/36, 2/36, 2/36, 2/36, 2/36}. So E(Y|X=2) = " + str(expectedValue([2,3,4,5,6],[Fraction(1,36),Fraction(2,36),Fraction(2,36),Fraction(2,36),Fraction(2,36)])) + ".")
print("In E(Y|X=3), range(Y) = {3,4,5,6} and prob(Y|X=3) = {1/36, 2/36, 2/36, 2/36}. So E(Y|X=3) = " + str(expectedValue([3,4,5,6],[Fraction(1,36),Fraction(2,36),Fraction(2,36),Fraction(2,36)])) + ".")
print("In E(Y|X=4), range(Y) = {4,5,6} and prob(Y|X=4) = {1/36, 2/36, 2/36}. So E(Y|X=4) = " + str(expectedValue([4,5,6],[Fraction(1,36),Fraction(2,36),Fraction(2,36)])) + ".")
print("In E(Y|X=5), range(Y) = {5,6} and prob(Y|X=5) = {1/36, 2/36}. So E(Y|X=5) = " + str(expectedValue([5,6],[Fraction(1,36),Fraction(2,36)])) + ".")
print("In E(Y|X=6), range(Y) = {6} and prob(Y|X=6) = {1/36}.  So E(Y|X=6) = " + str(Fraction(6,36)) + ".")
print("To check this, I can see if the sum of all of those add up to E(Y), because all of those partition the X space.")
print("E(Y) has a range of {1,2,3,4,5,6} and associated probabilities of {1/36, 3/36, 5/36, 7/36, 9/36, 11/36}.")
print("E(Y) = " + str(expectedValue([1,2,3,4,5,6],[Fraction(1,36),Fraction(3,36),Fraction(5,36),Fraction(7,36),Fraction(9,36),Fraction(11,36)])) + ".")
print("And the sum of all those guys is " + str(Fraction(41,36)+Fraction(19,18)+Fraction(11,12)+Fraction(13,18)+Fraction(17,36)+Fraction(1,6)) + " also!")

problem("Problem 2. An item X is selected randomly from a collection labeled {1,2,...,n}. Once an item is selected, an integer Y is chosen uniformly at random from {1,2,...,X}.")
print("(a) Compute E(Y).\n")
print("Since Y is drawn from a uniform distribution, the answer is simply (1+X)/2 - X and 1 are the endpoints.\n")
print("(b) Compute E(Y^2).\n")
print("There might be a more elegant way to do this, but I think it's just 1/n * ΣY^2 where Y is (1:X).")
print("(c) Compute SD(Y).\n")
print("(d) Compute P(X + Y - 2).\n")
print("(e) Compute Cov(R1,R2) and Corr(R1,R2).\n")
print("(f) Compute Corr(R1,X).\n")
print("(g) Compute Corr(X,Y).\n")

problem("Problem 3. Suppose X ~ Uniform{-1,0,1} and Y = X^2.  Compute Corr(X,Y).")
print("Corr(X,Y) = Cov(X,Y) / SD(X)*SD(Y)")
print("Var(X) = E(X^2) - (E(X))^2")
p3_rangeX = [-1,0,1]
p3_probX = [Fraction(1,3),Fraction(1,3),Fraction(1,3)] # because uniform
p3_EX = expectedValue(p3_rangeX,p3_probX)
p3_rangeXsquared = [(-1)**2,0**2,1**2]
p3_varX = expectedValue(p3_rangeXsquared,p3_probX) - p3_EX**2
p3_SDX = m.sqrt(p3_varX)
print("So Var(X) is " + str(p3_varX) + ", meaning SD(X) is " + str(p3_SDX) + ".")
p3_rangeY = p3_rangeXsquared
p3_probY = p3_probX
p3_EY = expectedValue(p3_rangeY,p3_probY)
p3_rangeYsquared = [((-1)**2)**2,(0**2)**2,(1**2)**2]
p3_varY = expectedValue(p3_rangeYsquared,p3_probY) - p3_EY**2
p3_SDY = m.sqrt(p3_varY)
print("And Var(Y) is " + str(p3_varY) + ", meaning SD(Y) is " + str(p3_SDY) + ".")
p3_rangeXY = [-1 * (-1)**2,0 * 0**2,1*1**2] 
p3_covXY = expectedValue(p3_rangeXY,p3_probX) - (p3_EX * p3_EY)
print("Since Cov(X,Y) = E(X*Y) - E(X)E(Y), Cov(X,Y) = " + str(p3_covXY) + "...")
print("So Corr(X,Y) = " + str(p3_covXY/(p3_SDX*p3_SDY)) + ".")
